name: Scheduled Release & TestPyPI Preview ðŸ§ª

on:
  schedule:
    - cron: '30 16 * * 5'   # Every Friday 10 PM IST / 4:30 PM UTC
  workflow_dispatch:

# We need write permission to push a branch; the second job only needs read.
permissions:
  contents: write

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    # expose the new branch name as a job output
    outputs:
      branch: ${{ steps.next.outputs.branch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set date prefix (YYMM)
        id: version
        run: |
          echo "prefix=$(date -u '+%y%m')" >> "$GITHUB_OUTPUT"

      - name: Fetch all remote branches
        run: git fetch --all --quiet --prune

      - name: Determine next branch version
        id: next
        run: |
          PREFIX=${{ steps.version.outputs.prefix }}
          EXISTING=$(git ls-remote --heads origin "refs/heads/releases/release_${PREFIX}.*" \
            | awk -F'releases/release_' '{print $2}' \
            | awk -F'/' '{print $1}')
          if [ -z "$EXISTING" ]; then
            NEXT=1
          else
            MAX=$(echo "$EXISTING" \
              | sed -E 's/^([0-9]{4})\.([0-9]+)$/\2/' \
              | sort -nr \
              | head -n1)
            NEXT=$((MAX + 1))
          fi
          BRANCH_NAME="releases/release_${PREFIX}.${NEXT}"
          echo "branch=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Create & push release branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b ${{ steps.next.outputs.branch }}
          git push origin ${{ steps.next.outputs.branch }}

  testpypi-upload:
    needs: create-release-branch
    runs-on: ubuntu-latest

    # this job only needs read permission
    permissions:
      contents: read

    steps:
      - name: Checkout new release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-branch.outputs.branch }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build package
        run: python -m build

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*
