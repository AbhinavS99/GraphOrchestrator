name: GraphOrchestrator | Code Quality Validation

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  validate-code:
    name: Validate Formatting, Typing, and Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure git to use PAT immediately
        run: |
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black coverage codecov pytest pytest-asyncio pre-commit mypy

      - name: Auto-format code and commit if needed
        run: |
          black graphorchestrator tests

          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if [[ -n "$(git status --porcelain)" ]]; then
            echo "ðŸ”µ Detected formatting changes. Committing..."

            git add .
            git commit -m "ðŸ¤– Auto-format code with Black"

            echo "ðŸ”µ Fetching branch to attach HEAD properly"
            git fetch origin ${{ github.head_ref }}
            git checkout ${{ github.head_ref }}

            echo "ðŸ”µ Pushing changes using PAT-authenticated remote"
            git push origin ${{ github.head_ref }}
          else
            echo "âœ… No formatting changes detected. No commit necessary."
          fi

      - name: Run static type checks (mypy)
        run: |
          mypy graphorchestrator tests

      - name: Run tests with coverage
        run: |
          coverage run -m pytest
          coverage report --fail-under=85
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          flags: pytest
          name: python-coverage
          fail_ci_if_error: true
